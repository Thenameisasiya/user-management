<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/styles/admindashboard.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <div class="dashboard-container" >
        <nav class="navbar">
            <h1>Admin Dashboard</h1>
            <div class="search-container">
                <input type="text" id="searchBox" placeholder="Search users..." onkeyup="filterUsers()">
                <button class="btn search-btn" id="searchBtn" onclick="filterUsers()">Search</button>
            </div>
            <button class="btn logout-btn" id="logoutBtn">
                <i class="icon-logout"></i> Logout
            </button>
        </nav>

        <div class="main-content">
            <button class="btn add-user-btn" id="addUserBtn"><i class="icon-plus"></i> Add User</button>
            <h2>User List</h2>
            <table>
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="userTableBody">
                    {{#each users}}
                    <tr data-id="{{this.id}}" data-username="{{this.username}}" data-email="{{this.email}}">
                        <td>{{@index}}</td>
                        <td>{{this.username}}</td>
                        <td>{{this.email}}</td>
                        <td>
                            <button class="btn edit-btn" onclick="openEditUserModal('{{this.id}}', '{{this.username}}', '{{this.email}}')">
                                <i class="icon-edit"></i> Edit
                            </button>
                            <button class="btn delete-btn" onclick="confirmDelete('{{this.id}}')">
                                <i class="icon-delete"></i> Delete
                            </button>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>

            <!--Delete-->
            <div id="deleteConfirmation" class="delete-confirmation-container">
                <div class="delete-confirmation-content">
                    <i class="icon-warning"></i>
                    <h3>Are you sure you want to delete this user?</h3>
                    <div class="confirmation-buttons">
                        <button class="btn cancel-btn" onclick="closeDeleteConfirmation()">Cancel</button>
                        <button id="confirmDeleteBtn" class="btn delete-btn">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add User Modal -->
    <div id="addUserModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal('addUserModal')">&times;</span>
            <h2>Add User</h2>
            <form id="addUserForm" method="POST" action="/admin/add-user">
                <label for="addUsername">Username:</label>
                <input type="text" id="addUsername" name="username" required>

                <label for="addEmail">Email:</label>
                <input type="email" id="addEmail" name="email" required>

                <label for="addPassword">Password:</label>
                <input type="password" id="addPassword" name="password" required>

                <button type="submit" class="btn">Add User</button>
            </form>
        </div>
    </div>

    <!-- Edit User Modal -->
    <div id="editUserModal" class="modal">
    <div class="modal-content">
        <span class="close-btn" onclick="closeModal('editUserModal')">&times;</span>
        <h2>Edit User</h2>
        <form id="editUserForm" method="POST" action="/admin/edit-user/{{this.id}}">
            <input type="hidden" id="editUserId" name="id" value="{{this.id}}">
        
            <label for="editUsername">Username:</label>
            <input type="text" id="editUsername" name="username" value="{{this.username}}" required>
        
            <label for="editEmail">Email:</label>
            <input type="email" id="editEmail" name="email" value="{{this.email}}" required disabled>
        
            <button type="submit" class="btn">Save Changes</button>
        </form>
    </div>
</div>
       <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize your scripts here if necessary
        });

        function filterUsers() {
            const searchInput = document.getElementById('searchBox').value.toLowerCase();
            const rows = document.querySelectorAll('#userTableBody tr');
            
            rows.forEach(row => {
                const username = row.dataset.username.toLowerCase();
                const email = row.dataset.email.toLowerCase();
                if (username.includes(searchInput) || email.includes(searchInput)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const addUserBtn = document.getElementById("addUserBtn");
            const logoutBtn = document.getElementById("logoutBtn");
            const addUserForm = document.getElementById("addUserForm");
            const editUserForm = document.getElementById("editUserForm");
            const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");

            const editUserIdInput = document.getElementById("editUserId");
            const editUsernameInput = document.getElementById("editUsername");
            const editEmailInput = document.getElementById("editEmail");

            let currentUserId = null;

            // Open Add User Modal
            addUserBtn?.addEventListener("click", () => openModal("addUserModal"));

            // Open Edit User Modal
            window.openEditUserModal = function (id, username, email) {
                currentUserId = id;
                editUserIdInput.value = id;
                editUsernameInput.value = username;
                editEmailInput.value = email;
                editEmailInput.disabled = true;

                openModal("editUserModal");
            };

            // Open Delete Confirmation Dialog
            window.confirmDelete = function (id) {
                currentUserId = id;
                document.getElementById("deleteConfirmation").style.display = "block";
            };

            // Close Delete Confirmation
            window.closeDeleteConfirmation = function () {
                document.getElementById("deleteConfirmation").style.display = "none";
            };

            // Confirm Delete
            confirmDeleteBtn?.addEventListener("click", () => {
                if (currentUserId) deleteUser(currentUserId);
                closeDeleteConfirmation();
            });

            // Submit Add User Form
            addUserForm?.addEventListener("submit", (event) => {
                event.preventDefault();
                const formData = new FormData(addUserForm);
                const username = formData.get("username");
                const email = formData.get("email");
                const password = formData.get("password");

                addUser({ username, email, password });
            });

            // Submit Edit User Form
            editUserForm?.addEventListener("submit", (event) => {
                event.preventDefault();
                const formData = new FormData(editUserForm);
                const id = formData.get("id");
                const username = formData.get("username");

                if (!username) {
                    showPopup("error", "Username cannot be empty!");
                    return;
                }

                updateUser(id, { username });
            });

            // Handle Logout
            logoutBtn?.addEventListener("click", () => {
                console.log("Logging out...");
                fetch('/admin/logout', { method: 'GET' })
                    .then((response) => {
                        if (response.ok) {
                            window.location.href = '/admin/login'; // Redirect to login page
                        } else {
                            throw new Error("Failed to log out");
                        }
                    })
                    .catch((error) => {
                        console.error("Error:", error.message);
                        showPopup("error", "Error logging out!");
                    });
            });

            // Open Modal
            function openModal(modalId) {
                const modal = document.getElementById(modalId);
                modal.style.display = "block";
            }

            // SweetAlert2 Popup Messages
            function showPopup(type, message) {
                Swal.fire({
                    title: type === "success" ? "Success!" : "Error!",
                    text: message,
                    icon: type,
                    confirmButtonColor: "#f26200",
                    confirmButtonText: "OK",
                    showConfirmButton: true,
                });
            }

            // Handle Add User
            function addUser(user) {
                fetch('/admin/add-user', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(user),
                })
                    .then((response) => {
                        if (!response.ok) throw new Error('Failed to add user!');
                        showPopup('success', 'User added successfully');
                        setTimeout(() => window.location.reload(), 2000);
                    })
                    .catch((error) => {
                        console.error("Error:", error.message);
                        showPopup('error', 'Error adding user');
                    });
            }

            // Handle Update User
            function updateUser(id, updatedData) {
                fetch(`/admin/edit-user/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(updatedData),
                })
                    .then((response) => {
                        if (!response.ok) throw new Error('Failed to update user!');
                        showPopup('success', 'User updated successfully');
                        setTimeout(() => window.location.reload(), 2000);
                    })
                    .catch((error) => {
                        console.error("Error:", error.message);
                        showPopup('error', 'Error updating user');
                    });
            }

            // Handle Delete User
            function deleteUser(id) {
                fetch(`/admin/delete-user/${id}`, {
                    method: 'DELETE',
                })
                    .then((response) => {
                        if (!response.ok) throw new Error('Failed to delete user!');
                        showPopup('success', 'User deleted successfully');
                        setTimeout(() => window.location.reload(), 2000);
                    })
                    .catch((error) => {
                        console.error("Error:", error.message);
                        showPopup('error', 'Error deleting user');
                    });
            }
        });
    </script>
</body>
</html>
